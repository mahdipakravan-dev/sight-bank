import { gsap } from 'gsap';
import * as React$1 from 'react';
import ScrollTrigger from 'gsap/ScrollTrigger';

type DataOrDataArray<T> = T | Array<T>;
type UnitValue<Unit = string> = {
    value: number;
    unit: Unit;
};
type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];
type FromToOptions = {
    to: gsap.TweenVars;
    from?: never;
    fromTo?: never;
} | {
    from: gsap.TweenVars;
    to?: never;
    fromTo?: never;
} | {
    fromTo: [gsap.TweenVars, gsap.TweenVars];
    to?: never;
    from?: never;
};
type StartEndOptions = {
    start: number;
    end: number;
};
type TweenBaseDef = StartEndOptions & FromToOptions;
type TweenTarget = gsap.TweenTarget | React.RefObject<HTMLElement>;
type TweenWithTargetDef = TweenBaseDef & {
    target: TweenTarget;
};
type TweenWithChildrenDef = TweenBaseDef;
type WaypointBaseDef = {
    at: number;
    onCall?: () => void;
    onReverseCall?: () => void;
    label?: string;
    disabled?: boolean;
};
type StaggerBaseDef = {
    overlap?: number;
    disabled?: boolean;
};
type SimpleTween = FromToOptions & {
    duration: number;
    forwards?: boolean;
};
type Plugin = Parameters<typeof gsap.registerPlugin>[number];

/**
 * Animation component enables defining animations using GSAP within the Scrollytelling context.
 *
 * @param {AnimationProps} props - Animation component props
 * @returns {null | React.ReactElement} Animation component
 * @link https://github.com/basementstudio/scrollytelling/blob/main/docs/api.md#animation
 */
declare function Animation(props: {
    tween: DataOrDataArray<TweenWithTargetDef>;
    disabled?: boolean;
}): null;
declare function Animation(props: {
    children: React$1.ReactNode;
    tween: DataOrDataArray<TweenWithChildrenDef>;
    disabled?: boolean;
}): React$1.ReactElement;

interface ParallaxProps {
    tween: StartEndOptions & {
        target?: TweenTarget;
    } & RequireAtLeastOne<{
        movementX?: UnitValue;
        movementY?: UnitValue;
    }>;
    children?: React$1.ReactNode;
    disabled?: boolean;
}
/**
 * Applies a parallax effect to its children using GSAP animations.
 *
 * @returns {JSX.Element} `Animation` component with parallax effect applied. _(Expects `children`)_
 * @link [[@bsmnt/scrollytelling] API Docs: Parallax](https://github.com/basementstudio/scrollytelling/blob/main/docs/api.md#parallax)
 */
declare const Parallax: React$1.FC<ParallaxProps>;

interface PinProps {
    childHeight: string | number;
    pinSpacerHeight: string | number;
    childClassName?: string;
    children?: React$1.ReactNode;
    pinSpacerClassName?: string;
    top?: string | number;
}
/**
 * Pin component enables pinning an element in its initial position while the remaining content scrolls.
 * It ensures that the pinned element stays fixed at its starting position within the active duration of Scrollytelling.
 *
 * @param {PinProps} props - Pin component props
 * @returns {JSX.Element} Pin component
 * @link https://github.com/basementstudio/scrollytelling/blob/main/docs/api.md#pin
 */
declare const Pin: React$1.ForwardRefExoticComponent<PinProps & React$1.RefAttributes<HTMLDivElement>>;

interface RegisterGsapPluginsProps {
    plugins: Plugin[];
}
/**
 * RegisterGsapPlugins registers GSAP plugins.
 *
 * @param {RegisterGsapPluginsProps} props - RegisterGsapPlugins component props
 * @returns {null}
 * @link https://github.com/basementstudio/scrollytelling/blob/main/docs/api.md#register-plugin
 */
declare const RegisterGsapPlugins: ({ plugins }: RegisterGsapPluginsProps) => null;

declare function Waypoint(props: WaypointBaseDef & {
    tween?: SimpleTween & {
        target: TweenTarget;
    };
}): null;
declare function Waypoint(props: WaypointBaseDef & {
    children: React$1.ReactNode;
    tween?: SimpleTween;
}): React$1.ReactElement;

declare function Stagger(props: StaggerBaseDef & {
    tween: TweenWithTargetDef;
}): React$1.ReactElement;
declare function Stagger(props: StaggerBaseDef & {
    children?: React$1.ReactNode[];
    tween: TweenWithChildrenDef;
}): React$1.ReactElement;

type Callback = (...args: unknown[]) => void;
declare class Emitter {
    events: Record<string, Callback[]>;
    constructor();
    emit(event: string, ...args: unknown[]): void;
    on(event: string, cb: Callback): () => void;
    off(event: string, cb: Callback): void;
    destroy(): void;
}

type ScrollytellingContextType = {
    timeline: GSAPTimeline | undefined;
    rootRef: React$1.RefObject<HTMLDivElement>;
    events: Emitter;
};
declare const useScrollytelling: () => ScrollytellingContextType;

declare const useScrollToLabel: (label: string, opts?: {
    behavior?: ScrollBehavior;
    offset?: number;
}) => () => void;

declare const Scrollytelling: ({ children, debug, start, end, callbacks, scrub, defaults, toggleActions, disabled, trigger, }: {
    children?: React$1.ReactNode;
    debug?: false | {
        label: string;
        visualizer?: boolean | undefined;
        markers?: boolean | undefined;
    } | undefined;
    /**
     * The start position of the timeline. This can be a string like "top top" or a number.
     * See https://greensock.com/docs/v3/Plugins/ScrollTrigger/start
     * @default "top top"
     */
    start?: ScrollTrigger.Vars["start"];
    /**
     * The end position of the timeline. This can be a string like "top top" or a number.
     * See https://greensock.com/docs/v3/Plugins/ScrollTrigger/end
     * @default "bottom bottom"
     */
    end?: ScrollTrigger.Vars["end"];
    callbacks?: Pick<ScrollTrigger.Vars, "onUpdate" | "onEnter" | "onEnterBack" | "onLeave" | "onLeaveBack" | "onToggle" | "onRefresh"> | undefined;
    trigger?: ScrollTrigger.Vars["trigger"];
    scrub?: number | boolean | undefined;
    defaults?: gsap.TweenVars | undefined;
    toggleActions?: ScrollTrigger.Vars["toggleActions"];
    disabled?: boolean | undefined;
}) => JSX.Element;

/**
 * ImageSequenceCanvas
 */
type SupportTable = {
    supportsWebp: boolean;
    supportsAvif: boolean;
};
type ImageSequenceCanvasProps = {
    getFrameSrc: (frame: number, supportTable: SupportTable) => string;
    controllerRef: React$1.ForwardedRef<{
        preload: (frameStart: number, frameEnd: number) => Promise<void>;
        draw: (frame: number) => Promise<void>;
        canvas: HTMLCanvasElement | null;
    }>;
    ref?: React$1.ForwardedRef<HTMLCanvasElement>;
    /**
     * Width and height define the drawing's quality
     */
    width: number;
    /**
     * Width and height define the drawing's quality
     */
    height: number;
} & JSX.IntrinsicElements["canvas"];
declare const ImageSequenceCanvas: React$1.ForwardRefExoticComponent<Omit<ImageSequenceCanvasProps, "ref"> & React$1.RefAttributes<HTMLCanvasElement>>;

export { Animation, ImageSequenceCanvas, ImageSequenceCanvasProps, Parallax, Pin, RegisterGsapPlugins, Scrollytelling as Root, Stagger, Waypoint, useScrollToLabel, useScrollytelling };
